// базовые настройки доступа
API_BASE_HOST = "https://...";
API_BASE_URL = "/api/v1";
// API ключ личного кабинета компании
API_KEY = "...";
// логин/пароль технического аккаунта с максимальными правами доступа
LOGIN = "...";
PASSWORD = "...";


// создание нового HTTP соединение с указанием сервера
// (последний параметр отвечает за использование защищенного соединения)
SSL = Новый ЗащищенноеСоединениеOpenSSL(
			Новый СертификатКлиентаWindows(СпособВыбораСертификатаWindows.Выбирать),
			Новый СертификатыУдостоверяющихЦентровWindows());
HTTP = Новый HTTPСоединение(API_BASE_HOST,,,,,,SSL);

// подготовка базовых заголовков для HTTP запросов
ЗаголовокЗапросаHTTP = Новый Соответствие(); 
ЗаголовокЗапросаHTTP.Вставить("Accept", "application/json"); 
ЗаголовокЗапросаHTTP.Вставить("Content-Type", "application/json");
ЗаголовокЗапросаHTTP.Вставить("X-ApiKey", API_KEY);


// -----
// 1. тестирование доступа (запрос не требует авторизации, только ключ API в заголовках запроса)
// -----
ЗапросHTTP = Новый HTTPЗапрос(API_BASE_URL+"/test/ping", ЗаголовокЗапросаHTTP); 
// GET запрос на сервер
ОтветHTTP = HTTP.Получить(ЗапросHTTP);
Если ОтветHTTP.КодСостояния <> 200 Тогда
	Сообщить("Код ответа: "+Строка(ОтветHTTP.КодСостояния)+Символы.ПС+ОтветHTTP.ПолучитьТелоКакСтроку("UTF-8"));
	Возврат;
КонецЕсли;


// -----
// 2. авторизация в системе заданным пользователем
// -----
LOGIN_WEB = КодироватьСтроку(XMLСтрока(LOGIN), СпособКодированияСтроки.КодировкаURL, "UTF8");
PASSWORD_WEB = КодироватьСтроку(XMLСтрока(PASSWORD), СпособКодированияСтроки.КодировкаURL, "UTF8");
url = API_BASE_URL+"/account/login"+"?login="+LOGIN_WEB+"&password="+PASSWORD_WEB;
ЗапросHTTP = Новый HTTPЗапрос(url, ЗаголовокЗапросаHTTP); 
// POST запрос с пустым телом
ОтветHTTP = HTTP.ОтправитьДляОбработки(ЗапросHTTP);
Если ОтветHTTP.КодСостояния <> 200 Тогда
	Сообщить("Код ответа: "+Строка(ОтветHTTP.КодСостояния)+Символы.ПС+ОтветHTTP.ПолучитьТелоКакСтроку("UTF-8"));
	Возврат;
КонецЕсли;
// значения первой возвращенной куки (.AspNet.ApplicationCookie)
// добавляется в заголовки всех последующих HTTP запросов
ЗаголовокЗапросаHTTP.Вставить("Cookie", ОтветHTTP.Заголовки["Set-Cookie"]);


// -----
// 3. перед созданием нового запроса, необходимо определить значения некоторых обязательных параметров
//    (в частности, идентификаторов компании заказчика и ответственного за заказ лица)
//    если эти параметры неизвестны, то можно запросить актуальные справочники с сервера
// -----
url = API_BASE_URL+"/tender/create";
ЗапросHTTP = Новый HTTPЗапрос(url, ЗаголовокЗапросаHTTP); 
ОтветHTTP = HTTP.Получить(ЗапросHTTP);
Если ОтветHTTP.КодСостояния <> 200 Тогда
	Сообщить("Код ответа: "+Строка(ОтветHTTP.КодСостояния)+Символы.ПС+ОтветHTTP.ПолучитьТелоКакСтроку("UTF-8"));
	Возврат;
КонецЕсли;
СообщениеОтвет = ОтветHTTP.ПолучитьТелоКакСтроку("UTF-8");
// разбор JSON ответа сервера
ЧтениеJSON = Новый ЧтениеJSON; 
ЧтениеJSON.УстановитьСтроку(СообщениеОтвет); 
Данные = ПрочитатьJSON(ЧтениеJSON); 
Если Данные.Corporates.Количество() = 0 Тогда
	Сообщить("Не найдены необходимые элементы справочника");
	Возврат;
КонецЕсли;
// получение идентификаторов из первых элементов справочников
coprorateId =  Данные.Corporates[0]["Id"];
contactId = Данные.Corporates[0]["ContactPersons"][0]["Id"];


// -----
// 4. Создание запроса
// -----
StartDate = ТекущаяДата()+60*60*24*7;  // дата исполнения заказа (текущая дата +7 дней)

// структура для передачи в запросе в формате JSON
ДанныеКОтправке = Новый Структура;
ДанныеКОтправке.Вставить("OrderDate", ТекущаяДата());		// время создания заказа
ДанныеКОтправке.Вставить("StartDate", StartDate);  			// дата исполнения заказа
ДанныеКОтправке.Вставить("Cargo", "Важный груз");
ДанныеКОтправке.Вставить("CargoWeight", 10);
ДанныеКОтправке.Вставить("CargoVolume", 10);
ДанныеКОтправке.Вставить("CargoDangerClass", 0);
ДанныеКОтправке.Вставить("PackageType", "Joint");			// сборный груз (не требует детального описания упаковки)

Customer = Новый Структура;
Customer.Вставить("CompanyId", coprorateId);
Customer.Вставить("ContactId", contactId);
ДанныеКОтправке.Вставить("Customer", Customer);

RoutePoints = Новый Массив;

ТочкаПогрузки1 = Новый Структура;
ТочкаПогрузки1.Вставить("Type", "Loading");
ТочкаПогрузки1.Вставить("Address", "Москва, Красная площадь");
ТочкаПогрузки1.Вставить("ArrivalTime", StartDate);  		// время прибытия = дата исполнения заказа
ТочкаПогрузки1.Вставить("LeaveTime", StartDate+60*60*1);  	// время отбытия +1 час
RoutePoints.Добавить(ТочкаПогрузки1);

ТочкаВыгрузки1 = Новый Структура;
ТочкаВыгрузки1.Вставить("Type", "Unloading");
ТочкаВыгрузки1.Вставить("Address", "Санкт-Петербург, Дворцовая площадь");
// если не указывть расстояние до точки маршрута, то система попытается самостоятельно построить маршрут и определить расстояние
// ТочкаВыгрузки1.Вставить("Distance", "750");
ТочкаВыгрузки1.Вставить("ArrivalTime", StartDate+60*60*24*19);
ТочкаВыгрузки1.Вставить("LeaveTime", StartDate+60*60*24*20);
RoutePoints.Добавить(ТочкаВыгрузки1);

ДанныеКОтправке.Вставить("RoutePoints", RoutePoints);

Тендер = Новый Структура;
Тендер.Вставить("StartDate", ТекущаяДата());				// запуск торгов сразу по созданию заказа
Тендер.Вставить("EndDate", StartDate-60*60*30);				// торги должны закончиться минимум за 30 минут до исполнения заказа
Тендер.Вставить("InitCost", 50000);
Тендер.Вставить("MinStepReq", "Auto");						// торги с автоматическим подбором минимального шага
Тендер.Вставить("VatReqs", "None");
ДанныеКОтправке.Вставить("Tender", Тендер);

ЗаписьJSON = Новый ЗаписьJSON; 
ЗаписьJSON.УстановитьСтроку(); 
ЗаписатьJSON(ЗаписьJSON, ДанныеКОтправке); 
СтрокаДляТела = ЗаписьJSON.Закрыть();

ФайлТелаЗапроса = ПолучитьИмяВременногоФайла(); 
ТекстФайл = Новый ТекстовыйДокумент; 
ТекстФайл.УстановитьТекст(СтрокаДляТела); 
ТекстФайл.Записать(ФайлТелаЗапроса, КодировкаТекста.UTF8); 
ЗапросHTTP.УстановитьИмяФайлаТела(ФайлТелаЗапроса);

ОтветHTTP = HTTP.ОтправитьДляОбработки(ЗапросHTTP); 
Если ОтветHTTP.КодСостояния <> 200 Тогда
	Сообщить("Код ответа: "+Строка(ОтветHTTP.КодСостояния)+Символы.ПС+ОтветHTTP.ПолучитьТелоКакСтроку("UTF-8"));
	Возврат;
КонецЕсли;
СообщениеОтвет = ОтветHTTP.ПолучитьТелоКакСтроку("UTF-8");
ЧтениеJSON = Новый ЧтениеJSON; 
ЧтениеJSON.УстановитьСтроку(СообщениеОтвет); 
Данные = ПрочитатьJSON(ЧтениеJSON); 
ЧтениеJSON.Закрыть();

// получение идентификатора новосозданного запроса
tenderId = Данные;


// -----
// 5. для проверки статуса нового запроса, запрашиваем полные данные по идентификатору
// -----
url = API_BASE_URL+"/tender/"+tenderId;
ЗапросHTTP = Новый HTTPЗапрос(url, ЗаголовокЗапросаHTTP);
ОтветHTTP = HTTP.Получить(ЗапросHTTP);  // GET 
Если ОтветHTTP.КодСостояния <> 200 Тогда
	Сообщить("Код ответа: "+Строка(ОтветHTTP.КодСостояния)+Символы.ПС+ОтветHTTP.ПолучитьТелоКакСтроку("UTF-8"));
	Возврат;
КонецЕсли;
СообщениеОтвет = ОтветHTTP.ПолучитьТелоКакСтроку("UTF-8");
ЧтениеJSON = Новый ЧтениеJSON; 
ЧтениеJSON.УстановитьСтроку(СообщениеОтвет); 
Данные = ПрочитатьJSON(ЧтениеJSON); 
ЧтениеJSON.Закрыть();
Сообщить("Номер: "+Строка(Данные["Number"]));
Сообщить("Статус: "+Строка(Данные["StatusTitle"])+" ("+Строка(Данные["Status"])+")");
Сообщить("Время последнего изменения статуса: "+Строка(Данные["ActualDate"])+" ("+Строка(Данные["ActualDateTitle"])+")");
Сообщить("Длина маршрута: "+Строка(Данные["RouteLenght"]));
Сообщить("Количество предложений: "+Строка(Данные["ProposalsCount"]));
Если ЗначениеЗаполнено(Данные["BestProposal"])  Тогда
	Сообщить("Лучшее предложение: "+Строка(Данные["BestProposal"]["Bet"]));
КонецЕсли;

Возврат;